import subprocess
import os
import pandas as pd
import sys
from dat_to_csv import dat_to_csv
# import pandas.rpy.common as com

def imp_testset(minp,minc):
	for i in range(0,1):
		mice_error_cnt = 0
		mice_error = ''
		no_nan_cnt = 0
		fstr = 'last12h_pmm_X_mp%s_mc%s_fold%d.csv'%(str(minp),str(minc),i)
		train = pd.read_csv('../data/train/%s'%(fstr))
		print fstr
		# fstr = 'X_%s_norm_%s_fold%d'%(m,ft,i)
		# train = pd.read_csv('../data/train/norm/%s.csv'%(fstr))
		# print len(train.columns)

		test = pd.read_csv('../data/test/alldata_readmit_last12h_X_test_fold%d.csv'%(i))
		# print len(test.columns)

		imputed_test = {}
		# key is number of imputation
		for k in range(5):
			imputed_test[k] = pd.DataFrame(columns=test.columns)

		row = 0
		u = -1
		gp = test.groupby('sid')
		for sid, group in gp:
			u += 1
			print sid, u
			# print row
			if row != len(imputed_test[0]):
				sys.exit("inconsistent length")
			row += len(group)
			# if no NaN, skip imputation
			if group.isnull().sum().sum() == 0:
				no_nan_cnt += 1
				for k in range(5):
					imputed_test[k] = imputed_test[k].append(group)
				continue

			# stick to-impute test record to train set
			to_impute = train.append(group)

			# delete temp folder
			if os.path.exists('imp_temp_test'):
				rm_cmd = ['rm', '-r', 'imp_temp_test']
				subprocess.call(rm_cmd)

			# do mice imputation
			command = 'Rscript'
			path2script = 'mice.R'
			to_impute.to_csv('to_impute.csv',index=False)
			cmd = [command, path2script, 'to_impute.csv', 'imp_temp_test', str(5), str(5), str(minp), str(minc)]
			# print cmd
			subprocess.call(cmd)
			# print len(to_impute.columns)

			# if error occurs, use mean imputation
			if not os.path.exists('imp_temp_test/imp_temp_test__IMPDATA%d.dat' % i):
				print 'mice error'
				mice_error_cnt += 1
				mice_error = mice_error + str(sid) + ' '
				to_impute = group
				imp_mean = to_impute.fillna(train.mean())
				for k in range(5):
					imputed_test[k] = imputed_test[k].append(imp_mean)
					imputed_test[k].to_csv('temp/%d.csv'%k,index=False)
				continue

			# convert .dat to .csv
			dat_to_csv('imp_temp_test', to_impute.columns, len(group))

			# save the imputed record
			for k in range(5):
				imputed = pd.read_csv('imp_temp_test/imp_temp_test_%d.csv' % k)
				imputed_test[k] = imputed_test[k].append(imputed[imputed['sid']==sid])
				imputed_test[k].to_csv('temp/%d.csv'%k,index=False)
		
		debuging(i)
		# combine 5 imputed files generated by mice
		# combine_files(imputed_test, imputed_test[0].columns, '../data/test/last12h_pmm_X_mp%s_mc%s_fold%d.csv'%(str(minp),str(minc),i))
		# combine_files(imputed_test, test.columns, '../data/test/norm/X_%s_norm_%s_fold%d.csv'%(m,ft,i))

		write_files(imputed_test, imputed_test[0].columns, '../data/test/last12h_pmm_X_mp%s_mc%s_fold%d'%(str(minp),str(minc),i))

		ofile = open("../data/test/last12h_pmm_X_mp%s_mc%s_fold%d/mice_error_cnt_norm.txt"%(str(minp),str(minc),i),'w')
		ofile.write('\n%d:\n'%(i))
		ofile.write('mice_error_cnt: ')
		ofile.write(str(mice_error_cnt))
		ofile.write('\nmice_error ')
		ofile.write(str(mice_error))
		ofile.write('\nno_nan_cnt: ')
		ofile.write(str(no_nan_cnt))
		ofile.close()

def write_files(file_list, column, dirs):
	if not os.path.exists(dirs):
		os.makedirs(dirs)
	for i in range(5):
		file_list[i].to_csv('%s/%d.csv'%(dirs,i))
				
def combine_files(file_list, column, fn):
	combined = pd.DataFrame(columns=column)
	# print file_list[1].shape[0]
	for k in range(file_list[1].shape[0]):
		l = []
		for col in combined.columns:
			# print file_list[0][col]
			l.append(ave(file_list, col, k))
		s = pd.Series(l,index=column)
		combined = combined.append(s,ignore_index=True)
	combined.to_csv(fn,index=False)

def ave(dic, col, row):
	s = 0
	for i in dic:
		s += dic[i][col][row]
	return s*1.0/5

def imp_train_pmm(minp,minc):
	for i in range(5):
		mice_error_cnt = 0
		mice_error = ''
		no_nan_cnt = 0

		train = pd.read_csv('../data/train/alldata_readmit_last12h_X_train_fold%d.csv'%(i))
		print '../data/train/alldata_readmit_last12h_X_train_fold%d.csv'%(i)

		if os.path.exists('imp_temp'):
			rm_cmd = ['rm', '-r', 'imp_temp']
			subprocess.call(rm_cmd)

		command = 'Rscript'
		path2script = 'mice.R'
		train.to_csv('to_impute_tr.csv',index=False)
		cmd = [command, path2script, 'to_impute_tr.csv', 'imp_temp', str(5), str(5), str(minp), str(minc)]
		subprocess.call(cmd)

		dat_to_csv('imp_temp', train.columns, 0)

		imputed_train = {}
		for j in range(5):
			imputed_train[j] = pd.read_csv('imp_temp/imp_temp_%d.csv'%j)
		write_files(imputed_train, train.columns, '../data/train/last12h_pmm_X_mp%s_mc%s_fold%d'%(str(minp),str(minc),i))
		combine_files(imputed_train, train.columns, '../data/train/last12h_pmm_X_mp%s_mc%s_fold%d.csv'%(str(minp),str(minc),i))

def mean_imp():
	for i in range(5):
		train = pd.read_csv('../data/train/alldata_readmit_last12h_X_train_fold%d.csv'%(i))
		imputed_train = train.fillna(train.mean())
		imputed_train.to_csv('../data/train/last12h_readmit_mean_X_train_fold%d.csv'%(i), index=False)
		
		test = pd.read_csv('../data/test/alldata_readmit_last12h_X_test_fold%d.csv'%(i))
		imputed_test = test.fillna(train.mean())
		imputed_test.to_csv('../data/test/last12h_readmit_mean_X_test_fold%d.csv'%(i), index=False)

def debuging(i):
	imputed_test = {}
	for k in range(5):
		imputed_test[k] = pd.read_csv('temp/%d.csv'%k)
	combine_files(imputed_test, imputed_test[0].columns, '../data/test/last12h_pmm_X_mp%s_mc%s_fold%d.csv'%(str(0),str(0),i))
# debuging(2)

# mean_imp()
# imp_train_pmm(0,0)
imp_testset(0,0)

# for p in [0, 0.4, 0.5, 0.65, 0.9]:
# 	for c in [0.8, 0.9]:
# 		print 'minp-is',p
# 		print 'minc-is',c
# 		imp_train_pmm(p,c)
# 		imp_testset(p,c)
        
#imp_train_pmm()
#imp_testset()
# imp_train_norm()
