import pandas as pd
import subprocess
import re
from datetime import datetime
import nel_graph_gen_interpolation as nggi
x = nggi.NelGraphGenInterpolation()
# x.scan_csv_interpolation("../data/train/last12h_mean_train_fold0.csv", "../data/train/mean_fold0_mimic.nel", "../data/train/mean_fold0_mimic.node")

def moss(freq_t, nthfold, i=None, sid=None):
	command = 'java'
	mode = '-cp'
	filename = '../moss.jar'
	funcname = 'moss.Miner'
	p1 = '-inelist'
	p2 = '-onelist'
	p3 = '-m1'
	p4 = '-s0.%s'%freq_t
	if i == None:
		# print 'wtf'
		p5 = '../data/train/last12h_mean_fold%d.nel'%(nthfold)
		p6 = '../data/train/last12h_mean_mimic_m1_s0.%s_fold%d.out'%(freq_t,nthfold)
		p7 = '../data/train/last12h_mean_mimic_m1_s0.%s_fold%d.ids'%(freq_t,nthfold)
		cmd = [command, mode, filename, funcname, p1, p2, p3, p4, p5, p6, p7]
		with open('../data/train/last12h_mean_log_m1_s0.%s_fold%d'%(freq_t,nthfold), 'w') as f:
			subprocess.call(cmd, stderr=f)
	else:
		# print 'wff2222'
		p5 = '../data/test/last12h_mean_fold%d.nel'%(nthfold)
		p6 = '../data/test/last12h_mean_mimic_m1_s0.%s_fold%d.out'%(freq_t,nthfold)
		p7 = '../data/test/last12h_mean_mimic_m1_s0.%s_fold%d.ids'%(freq_t,nthfold)
		cmd = [command, mode, filename, funcname, p1, p2, p3, p4, p5, p6, p7]
		with open('../data/test/moss_log/last12h_mean_log_m1_s0.%s_fold%d_%d_%d'%(freq_t,nthfold,i,sid), 'w') as f:
			subprocess.call(cmd, stderr=f)

# 1:5242_45,6675_45,12026_45,25775_45
# 5242_45 -> 2 
# 6675_45 -> 4 
# 6675_45 -> 6 
# 12026_45 -> 4 
# 12026_45 -> 5 
# 12026_45 -> 6 
# 25775_45 -> 2 
# 25775_45 -> 5 

# hids['5242_45,6675_45,12026_45,25775_45'] = {new_sg_list, nodemap_list}
# new_sg_list = ['17_2']
# nodemap_list = ['5242_45 -> 2', ..., '17_2 -> 2']

# n 1 mSBP_n_-2
# n 2 mSBP_n_0
# n 3 mSBP_n_0
# e 2 1 tdown
# e 1 3 tup
# g 5
# s 3 2 5 0.0073333136 0 0.0

# 'n 1 mSBP_n_-2\nn 2 mSBP_n_0\nn 3 mSBP_n_0\ne 2 1 tdown\ne 1 3 tup\ng 5\ns 3 2 5 0.0073333136 0 0.0\n\n'

def read_fnout(fnout):
	hout = {}; nodestrlist = []; edgestrlist = []; sstr = ''; gstr = ''
	for ln in fnout:
		ln = ln.rstrip(" \n")
		if len(ln) == 0:
			continue
		if ln[0] == 'n':
			nodestrlist.append(ln)
		elif ln[0] == 'e':
			edgestrlist.append(ln)
		elif ln[0] == 'g':
			gid = int(ln[2:])
			gstr = ln
		elif ln[0] == 's':
			sstr = ln
			nodeinfo = ''
			for ns in nodestrlist:
				nodeinfo += ns + '\n'
			for es in edgestrlist:
				nodeinfo += es + '\n'
			nodeinfo += gstr + '\n'
			nodeinfo += sstr + '\n\n'
			hout[gid] = nodeinfo
			nodestrlist = []; edgestrlist = []
	return hout
	# ftest = open('../data/train/todelete.out','w')
	# ftest.write(hout[1])
	# ftest.write(hout[2])
	# ftest.write(hout[3])
	# ftest.write(hout[4])
	# ftest.write(hout[5404])
	# ftest.close()

def read_fnids(fnids, hout):
	hids = {}; gid = None; prev_gid = None; sgstr = ''; nodemap = ''; sglist = ''; prev_sglist = ''
	i = 0
	for line in fnids:
		i += 1
		m = re.search(r'^(\d+):(.*)$', line)
		if m:
			prev_gid = gid
			prev_sglist = sglist
			gid = int(m.group(1))
			sglist = m.group(2)
			if prev_gid != None:
				if prev_sglist not in hids:
					hids[prev_sglist] = {}
				hids[prev_sglist]['gid'] = prev_gid
				hids[prev_sglist]['sgstr'] = sgstr
				hids[prev_sglist]['nodeinfo'] = hout[prev_gid]
				nodemap = ''; sgstr = ''
			continue
		m = re.search(r'^([\d_]+) -> (.*) $', line)
		if m:
			nodemap = m.group(1) + ' -> ' + m.group(2)
			sgstr += nodemap + ' \n'

	if sglist not in hids:
		hids[sglist] = {}
	hids[sglist]['gid'] = gid
	hids[sglist]['sgstr'] = sgstr
	hids[sglist]['nodeinfo'] = hout[gid]
	# ftest = open('../data/train/todelete2.out','w')
	# ftest.write(str(hids['4951_53,4968_53,5050_53,5072_53,5074_53,5077_53,5099_53,5138_53,5142_53,5145_53,5161_53,5170_53,5195_53,5205_53,5231_53,5239_53,5242_53,5278_53,5282_53,5289_53,5319_53,5321_53,5328_53,5393_53,5400_53,5450_53,5453_53,5481_53,5491_53,5494_53,5495_53,5528_53,5542_53,5544_53,5573_53,5581_53,5619_53,5620_53,5666_53,5675_53,5709_53,5760_53,5766_53,5768_53,5783_53,5786_53,5795_53,5818_53,5824_53,5841_53,5908_53,5937_53,6001_53,6008_53,6024_53,6082_53,6085_53,6086_53,6098_53,6124_53,6145_53,6147_53,6156_53,6158_53,6160_53,6202_53,6212_53,6272_53,6283_53,6317_53,6321_53,6331_53,6349_53,6353_53,6358_53,6365_53,6440_53,6447_53,6451_53,6464_53,6466_53,6470_53,6534_53,6540_53,6542_53,6545_53,6552_53,6575_53,6604_53,6621_53,6624_53,6653_53,6667_53,6675_53,6685_53,6707_53,6718_53,6736_53,6783_53,6809_53,6824_53,6841_53,6863_53,6892_53,6894_53,6914_53,6920_53,6930_53,6950_53,6960_53,6962_53,6978_53,6988_53,7013_53,7051_53,7066_53,7107_53,7125_53,7225_53,7246_53,7251_53,7258_53,7289_53,7326_53,7354_53,7357_53,7359_53,7363_53,7371_53,7413_53,7478_53,7492_53,7494_53,7514_53,7522_53,7552_53,7614_53,7671_53,7681_53,7718_53,7731_53,7752_53,7787_53,7798_53,7853_53,7883_53,7958_53,7968_53,7985_53,8057_53,8068_53,8070_53,8073_53,8081_53,8086_53,8110_53,8114_53,8115_53,8120_53,8188_53,8224_53,8238_53,8314_53,8323_53,8344_53,8364_53,8374_53,8418_53,8432_53,8467_53,8489_53,8493_53,8513_53,8551_53,8556_53,8569_53,8608_53,8686_53,8734_53,8798_53,8799_53,8822_53,8845_53,8870_53,8917_53,8947_53,8948_53,8989_53,8992_53,8995_53,8996_53,9013_53,9016_53,9044_53,9056_53,9070_53,9132_53,9141_53,9177_53,9186_53,9227_53,9233_53,9248_53,9267_53,9278_53,9302_53,9324_53,9330_53,9331_53,9339_53,9393_53,9407_53,9434_53,9453_53,9473_53,9480_53,9547_53,9575_53,9622_53,9648_53,9667_53,9673_53,9688_53,9714_53,9715_53,9725_53,9753_53,9778_53,9787_53,9791_53,9818_53,9863_53,9873_53,9882_53,9887_53,9895_53,9906_53,9923_53,9933_53,9981_53,9982_53,9996_53,10088_53,10124_53,10152_53,10160_53,10168_53,10188_53,10197_53,10247_53,10254_53,10305_53,10315_53,10328_53,10416_53,10417_53,10422_53,10434_53,10451_53,10471_53,10478_53,10510_53,10569_53,10595_53,10604_53,10612_53,10634_53,10635_53,10653_53,10655_53,10676_53,10677_53,10687_53,10742_53,10751_53,10820_53,10832_53,10839_53,10859_53,10917_53,10924_53,10925_53,10928_53,10947_53,10987_53,11007_53,11066_53,11076_53,11090_53,11108_53,11146_53,11162_53,11165_53,11205_53,11212_53,11321_53,11341_53,11342_53,11343_53,11395_53,11427_53,11442_53,11464_53,11473_53,11477_53,11512_53,11638_53,11708_53,11710_53,11745_53,11763_53,11764_53,11767_53,11787_53,11838_53,11842_53,11850_53,11877_53,11880_53,11892_53,11901_53,11908_53,11912_53,11923_53,11944_53,12026_53,12028_53,12077_53,12081_53,12104_53,12154_53,12157_53,12164_53,12203_53,12234_53,12289_53,12292_53,12310_53,12346_53,12375_53,12387_53,12403_53,12408_53,12413_53,12467_53,12532_53,12573_53,12581_53,12634_53,12693_53,12706_53,12713_53,12733_53,12739_53,12769_53,12770_53,12773_53,12788_53,12830_53,12849_53,12896_53,12914_53,12920_53,12940_53,12945_53,12982_53,12984_53,12987_53,13052_53,13055_53,13080_53,13179_53,13183_53,13192_53,13318_53,13355_53,13431_53,13486_53,13507_53,13528_53,13543_53,13564_53,13634_53,13664_53,13702_53,13705_53,13740_53,13807_53,13835_53,13852_53,13856_53,13920_53,13922_53,13935_53,13960_53,13978_53,13998_53,14012_53,14041_53,14085_53,14087_53,14104_53,14114_53,14116_53,14131_53,14193_53,14205_53,14313_53,14316_53,14321_53,14329_53,14348_53,14363_53,14405_53,14417_53,14432_53,14475_53,14510_53,14517_53,14520_53,14550_53,14568_53,14579_53,14585_53,14622_53,14669_53,14701_53,14705_53,14711_53,14741_53,14749_53,14824_53,14837_53,14858_53,14862_53,14887_53,14928_53,14950_53,14975_53,15012_53,15017_53,15046_53,15052_53,15057_53,15061_53,15128_53,15160_53,15175_53,15209_53,15226_53,15232_53,15243_53,15283_53,15285_53,15357_53,15380_53,15418_53,15439_53,15441_53,15450_53,15453_53,15454_53,15472_53,15477_53,15485_53,15486_53,15503_53,15509_53,15545_53,15548_53,15558_53,15570_53,15573_53,15624_53,15686_53,15688_53,15733_53,15769_53,15843_53,15847_53,15850_53,15904_53,15919_53,15933_53,15952_53,15964_53,15971_53,16013_53,16022_53,16044_53,16074_53,16112_53,16129_53,16166_53,16172_53,16186_53,16194_53,16216_53,16236_53,16256_53,16275_53,16286_53,16312_53,16345_53,16391_53,16412_53,16455_53,16483_53,16504_53,16531_53,16549_53,16550_53,16577_53,16579_53,16603_53,16618_53,16636_53,16666_53,16680_53,16695_53,16698_53,16709_53,16721_53,16726_53,16740_53,16745_53,16748_53,16752_53,16787_53,16791_53,16805_53,16839_53,16860_53,16884_53,16888_53,16917_53,16949_53,16961_53,17021_53,17065_53,17072_53,17083_53,17089_53,17122_53,17125_53,17132_53,17155_53,17182_53,17190_53,17191_53,17206_53,17244_53,17278_53,17339_53,17421_53,17505_53,17521_53,17530_53,17539_53,17546_53,17564_53,17581_53,17586_53,17589_53,17613_53,17655_53,17658_53,17659_53,17683_53,17708_53,17722_53,17782_53,17789_53,17795_53,17807_53,17827_53,17833_53,17843_53,17863_53,17891_53,17894_53,17912_53,17946_53,17949_53,17969_53,17976_53,17977_53,18022_53,18032_53,18035_53,18054_53,18063_53,18076_53,18089_53,18094_53,18103_53,18104_53,18123_53,18251_53,18400_53,18402_53,18419_53,18420_53,18430_53,18477_53,18556_53,18557_53,18559_53,18614_53,18622_53,18623_53,18677_53,18689_53,18699_53,18700_53,18704_53,18771_53,18847_53,18902_53,18908_53,18928_53,18936_53,18942_53,18967_53,19002_53,19012_53,19016_53,19053_53,19069_53,19087_53,19095_53,19098_53,19148_53,19201_53,19270_53,19289_53,19296_53,19303_53,19333_53,19334_53,19346_53,19351_53,19354_53,19412_53,19543_53,19570_53,19588_53,19616_53,19622_53,19666_53,19690_53,19701_53,19731_53,19754_53,19811_53,19815_53,19823_53,19833_53,19842_53,19848_53,19859_53,19891_53,19894_53,19911_53,19952_53,20007_53,20062_53,20064_53,20086_53,20101_53,20116_53,20181_53,20187_53,20242_53,20249_53,20309_53,20318_53,20346_53,20372_53,20381_53,20389_53,20396_53,20423_53,20425_53,20426_53,20479_53,20546_53,20548_53,20561_53,20573_53,20577_53,20582_53,20626_53,20742_53,20743_53,20769_53,20796_53,20865_53,20920_53,20925_53,20929_53,20931_53,20938_53,20947_53,20957_53,20966_53,20968_53,21042_53,21051_53,21071_53,21093_53,21102_53,21108_53,21138_53,21166_53,21168_53,21255_53,21277_53,21306_53,21312_53,21321_53,21323_53,21334_53,21369_53,21399_53,21413_53,21431_53,21454_53,21458_53,21469_53,21483_53,21507_53,21510_53,21513_53,21520_53,21613_53,21619_53,21700_53,21757_53,21771_53,21795_53,21827_53,21845_53,21860_53,21951_53,21965_53,21975_53,22017_53,22092_53,22098_53,22119_53,22126_53,22158_53,22192_53,22213_53,22253_53,22291_53,22297_53,22336_53,22350_53,22383_53,22392_53,22426_53,22466_53,22475_53,22490_53,22493_53,22553_53,22559_53,22578_53,22579_53,22581_53,22587_53,22644_53,22656_53,22663_53,22753_53,22766_53,22797_53,22800_53,22823_53,22836_53,22844_53,22855_53,22856_53,22872_53,22888_53,22891_53,22938_53,22946_53,22951_53,23014_53,23023_53,23038_53,23049_53,23060_53,23082_53,23154_53,23161_53,23178_53,23194_53,23209_53,23219_53,23292_53,23325_53,23394_53,23473_53,23477_53,23489_53,23498_53,23549_53,23637_53,23675_53,23711_53,23719_53,23735_53,23755_53,23762_53,23786_53,23788_53,23802_53,23809_53,23811_53,23845_53,23849_53,23885_53,23980_53,24030_53,24086_53,24099_53,24105_53,24121_53,24129_53,24132_53,24190_53,24210_53,24226_53,24237_53,24249_53,24285_53,24338_53,24357_53,24374_53,24444_53,24499_53,24504_53,24569_53,24577_53,24588_53,24743_53,24794_53,24807_53,24825_53,24837_53,24856_53,24872_53,24937_53,24958_53,24978_53,25008_53,25016_53,25053_53,25069_53,25075_53,25113_53,25148_53,25150_53,25167_53,25177_53,25255_53,25302_53,25313_53,25317_53,25318_53,25368_53,25377_53,25384_53,25395_53,25413_53,25429_53,25449_53,25458_53,25510_53,25523_53,25538_53,25655_53,25658_53,25670_53,25697_53,25699_53,25725_53,25734_53,25775_53,25786_53,25790_53,25860_53,25891_53,25929_53,25950_53,25954_53,25997_53,26013_53,26095_53,26105_53,26118_53,26140_53,26160_53,26169_53,26187_53,26215_53,26219_53,26220_53,26224_53,26228_53,26231_53,26308_53,26317_53,26324_53,26331_53,26356_53,26401_53,26421_53,26459_53,26469_53,26475_53,26523_53,26535_53,26576_53,26601_53,26633_53,26648_53,26673_53,26678_53']['gid'])+': ')
	# ftest.write(hids['4951_53,4968_53,5050_53,5072_53,5074_53,5077_53,5099_53,5138_53,5142_53,5145_53,5161_53,5170_53,5195_53,5205_53,5231_53,5239_53,5242_53,5278_53,5282_53,5289_53,5319_53,5321_53,5328_53,5393_53,5400_53,5450_53,5453_53,5481_53,5491_53,5494_53,5495_53,5528_53,5542_53,5544_53,5573_53,5581_53,5619_53,5620_53,5666_53,5675_53,5709_53,5760_53,5766_53,5768_53,5783_53,5786_53,5795_53,5818_53,5824_53,5841_53,5908_53,5937_53,6001_53,6008_53,6024_53,6082_53,6085_53,6086_53,6098_53,6124_53,6145_53,6147_53,6156_53,6158_53,6160_53,6202_53,6212_53,6272_53,6283_53,6317_53,6321_53,6331_53,6349_53,6353_53,6358_53,6365_53,6440_53,6447_53,6451_53,6464_53,6466_53,6470_53,6534_53,6540_53,6542_53,6545_53,6552_53,6575_53,6604_53,6621_53,6624_53,6653_53,6667_53,6675_53,6685_53,6707_53,6718_53,6736_53,6783_53,6809_53,6824_53,6841_53,6863_53,6892_53,6894_53,6914_53,6920_53,6930_53,6950_53,6960_53,6962_53,6978_53,6988_53,7013_53,7051_53,7066_53,7107_53,7125_53,7225_53,7246_53,7251_53,7258_53,7289_53,7326_53,7354_53,7357_53,7359_53,7363_53,7371_53,7413_53,7478_53,7492_53,7494_53,7514_53,7522_53,7552_53,7614_53,7671_53,7681_53,7718_53,7731_53,7752_53,7787_53,7798_53,7853_53,7883_53,7958_53,7968_53,7985_53,8057_53,8068_53,8070_53,8073_53,8081_53,8086_53,8110_53,8114_53,8115_53,8120_53,8188_53,8224_53,8238_53,8314_53,8323_53,8344_53,8364_53,8374_53,8418_53,8432_53,8467_53,8489_53,8493_53,8513_53,8551_53,8556_53,8569_53,8608_53,8686_53,8734_53,8798_53,8799_53,8822_53,8845_53,8870_53,8917_53,8947_53,8948_53,8989_53,8992_53,8995_53,8996_53,9013_53,9016_53,9044_53,9056_53,9070_53,9132_53,9141_53,9177_53,9186_53,9227_53,9233_53,9248_53,9267_53,9278_53,9302_53,9324_53,9330_53,9331_53,9339_53,9393_53,9407_53,9434_53,9453_53,9473_53,9480_53,9547_53,9575_53,9622_53,9648_53,9667_53,9673_53,9688_53,9714_53,9715_53,9725_53,9753_53,9778_53,9787_53,9791_53,9818_53,9863_53,9873_53,9882_53,9887_53,9895_53,9906_53,9923_53,9933_53,9981_53,9982_53,9996_53,10088_53,10124_53,10152_53,10160_53,10168_53,10188_53,10197_53,10247_53,10254_53,10305_53,10315_53,10328_53,10416_53,10417_53,10422_53,10434_53,10451_53,10471_53,10478_53,10510_53,10569_53,10595_53,10604_53,10612_53,10634_53,10635_53,10653_53,10655_53,10676_53,10677_53,10687_53,10742_53,10751_53,10820_53,10832_53,10839_53,10859_53,10917_53,10924_53,10925_53,10928_53,10947_53,10987_53,11007_53,11066_53,11076_53,11090_53,11108_53,11146_53,11162_53,11165_53,11205_53,11212_53,11321_53,11341_53,11342_53,11343_53,11395_53,11427_53,11442_53,11464_53,11473_53,11477_53,11512_53,11638_53,11708_53,11710_53,11745_53,11763_53,11764_53,11767_53,11787_53,11838_53,11842_53,11850_53,11877_53,11880_53,11892_53,11901_53,11908_53,11912_53,11923_53,11944_53,12026_53,12028_53,12077_53,12081_53,12104_53,12154_53,12157_53,12164_53,12203_53,12234_53,12289_53,12292_53,12310_53,12346_53,12375_53,12387_53,12403_53,12408_53,12413_53,12467_53,12532_53,12573_53,12581_53,12634_53,12693_53,12706_53,12713_53,12733_53,12739_53,12769_53,12770_53,12773_53,12788_53,12830_53,12849_53,12896_53,12914_53,12920_53,12940_53,12945_53,12982_53,12984_53,12987_53,13052_53,13055_53,13080_53,13179_53,13183_53,13192_53,13318_53,13355_53,13431_53,13486_53,13507_53,13528_53,13543_53,13564_53,13634_53,13664_53,13702_53,13705_53,13740_53,13807_53,13835_53,13852_53,13856_53,13920_53,13922_53,13935_53,13960_53,13978_53,13998_53,14012_53,14041_53,14085_53,14087_53,14104_53,14114_53,14116_53,14131_53,14193_53,14205_53,14313_53,14316_53,14321_53,14329_53,14348_53,14363_53,14405_53,14417_53,14432_53,14475_53,14510_53,14517_53,14520_53,14550_53,14568_53,14579_53,14585_53,14622_53,14669_53,14701_53,14705_53,14711_53,14741_53,14749_53,14824_53,14837_53,14858_53,14862_53,14887_53,14928_53,14950_53,14975_53,15012_53,15017_53,15046_53,15052_53,15057_53,15061_53,15128_53,15160_53,15175_53,15209_53,15226_53,15232_53,15243_53,15283_53,15285_53,15357_53,15380_53,15418_53,15439_53,15441_53,15450_53,15453_53,15454_53,15472_53,15477_53,15485_53,15486_53,15503_53,15509_53,15545_53,15548_53,15558_53,15570_53,15573_53,15624_53,15686_53,15688_53,15733_53,15769_53,15843_53,15847_53,15850_53,15904_53,15919_53,15933_53,15952_53,15964_53,15971_53,16013_53,16022_53,16044_53,16074_53,16112_53,16129_53,16166_53,16172_53,16186_53,16194_53,16216_53,16236_53,16256_53,16275_53,16286_53,16312_53,16345_53,16391_53,16412_53,16455_53,16483_53,16504_53,16531_53,16549_53,16550_53,16577_53,16579_53,16603_53,16618_53,16636_53,16666_53,16680_53,16695_53,16698_53,16709_53,16721_53,16726_53,16740_53,16745_53,16748_53,16752_53,16787_53,16791_53,16805_53,16839_53,16860_53,16884_53,16888_53,16917_53,16949_53,16961_53,17021_53,17065_53,17072_53,17083_53,17089_53,17122_53,17125_53,17132_53,17155_53,17182_53,17190_53,17191_53,17206_53,17244_53,17278_53,17339_53,17421_53,17505_53,17521_53,17530_53,17539_53,17546_53,17564_53,17581_53,17586_53,17589_53,17613_53,17655_53,17658_53,17659_53,17683_53,17708_53,17722_53,17782_53,17789_53,17795_53,17807_53,17827_53,17833_53,17843_53,17863_53,17891_53,17894_53,17912_53,17946_53,17949_53,17969_53,17976_53,17977_53,18022_53,18032_53,18035_53,18054_53,18063_53,18076_53,18089_53,18094_53,18103_53,18104_53,18123_53,18251_53,18400_53,18402_53,18419_53,18420_53,18430_53,18477_53,18556_53,18557_53,18559_53,18614_53,18622_53,18623_53,18677_53,18689_53,18699_53,18700_53,18704_53,18771_53,18847_53,18902_53,18908_53,18928_53,18936_53,18942_53,18967_53,19002_53,19012_53,19016_53,19053_53,19069_53,19087_53,19095_53,19098_53,19148_53,19201_53,19270_53,19289_53,19296_53,19303_53,19333_53,19334_53,19346_53,19351_53,19354_53,19412_53,19543_53,19570_53,19588_53,19616_53,19622_53,19666_53,19690_53,19701_53,19731_53,19754_53,19811_53,19815_53,19823_53,19833_53,19842_53,19848_53,19859_53,19891_53,19894_53,19911_53,19952_53,20007_53,20062_53,20064_53,20086_53,20101_53,20116_53,20181_53,20187_53,20242_53,20249_53,20309_53,20318_53,20346_53,20372_53,20381_53,20389_53,20396_53,20423_53,20425_53,20426_53,20479_53,20546_53,20548_53,20561_53,20573_53,20577_53,20582_53,20626_53,20742_53,20743_53,20769_53,20796_53,20865_53,20920_53,20925_53,20929_53,20931_53,20938_53,20947_53,20957_53,20966_53,20968_53,21042_53,21051_53,21071_53,21093_53,21102_53,21108_53,21138_53,21166_53,21168_53,21255_53,21277_53,21306_53,21312_53,21321_53,21323_53,21334_53,21369_53,21399_53,21413_53,21431_53,21454_53,21458_53,21469_53,21483_53,21507_53,21510_53,21513_53,21520_53,21613_53,21619_53,21700_53,21757_53,21771_53,21795_53,21827_53,21845_53,21860_53,21951_53,21965_53,21975_53,22017_53,22092_53,22098_53,22119_53,22126_53,22158_53,22192_53,22213_53,22253_53,22291_53,22297_53,22336_53,22350_53,22383_53,22392_53,22426_53,22466_53,22475_53,22490_53,22493_53,22553_53,22559_53,22578_53,22579_53,22581_53,22587_53,22644_53,22656_53,22663_53,22753_53,22766_53,22797_53,22800_53,22823_53,22836_53,22844_53,22855_53,22856_53,22872_53,22888_53,22891_53,22938_53,22946_53,22951_53,23014_53,23023_53,23038_53,23049_53,23060_53,23082_53,23154_53,23161_53,23178_53,23194_53,23209_53,23219_53,23292_53,23325_53,23394_53,23473_53,23477_53,23489_53,23498_53,23549_53,23637_53,23675_53,23711_53,23719_53,23735_53,23755_53,23762_53,23786_53,23788_53,23802_53,23809_53,23811_53,23845_53,23849_53,23885_53,23980_53,24030_53,24086_53,24099_53,24105_53,24121_53,24129_53,24132_53,24190_53,24210_53,24226_53,24237_53,24249_53,24285_53,24338_53,24357_53,24374_53,24444_53,24499_53,24504_53,24569_53,24577_53,24588_53,24743_53,24794_53,24807_53,24825_53,24837_53,24856_53,24872_53,24937_53,24958_53,24978_53,25008_53,25016_53,25053_53,25069_53,25075_53,25113_53,25148_53,25150_53,25167_53,25177_53,25255_53,25302_53,25313_53,25317_53,25318_53,25368_53,25377_53,25384_53,25395_53,25413_53,25429_53,25449_53,25458_53,25510_53,25523_53,25538_53,25655_53,25658_53,25670_53,25697_53,25699_53,25725_53,25734_53,25775_53,25786_53,25790_53,25860_53,25891_53,25929_53,25950_53,25954_53,25997_53,26013_53,26095_53,26105_53,26118_53,26140_53,26160_53,26169_53,26187_53,26215_53,26219_53,26220_53,26224_53,26228_53,26231_53,26308_53,26317_53,26324_53,26331_53,26356_53,26401_53,26421_53,26459_53,26469_53,26475_53,26523_53,26535_53,26576_53,26601_53,26633_53,26648_53,26673_53,26678_53']['sgstr'])
	# ftest.write(str(hids['5205_34,6082_34,6440_34,7066_34,12984_34']['gid'])+': ')
	# ftest.write(hids['5205_34,6082_34,6440_34,7066_34,12984_34']['sgstr'])
	# ftest.write(hids['5205_34,6082_34,6440_34,7066_34,12984_34']['nodeinfo'])
	# ftest.write(str(hids['5242_60,6202_60,10925_60,11321_60,12026_60,12739_60,19334_60,20966_60,22475_60,24121_60,26308_60']['gid'])+': ')
	# ftest.write(hids['5242_60,6202_60,10925_60,11321_60,12026_60,12739_60,19334_60,20966_60,22475_60,24121_60,26308_60']['sgstr'])
	return hids

def get_sg_tr_hash(freq_t, nthfold):
	fnout = open('../data/train/last12h_mean_mimic_m1_s0.%s_fold%d.out'%(freq_t,nthfold), 'r')
	fnids = open('../data/train/last12h_mean_mimic_m1_s0.%s_fold%d.ids'%(freq_t,nthfold), 'r')

	hout = read_fnout(fnout)
	hids = read_fnids(fnids, hout)

	fnout.close()
	fnids.close()

	return hids

def write_subgraphs(h, freq_t, nthfold):
	fnout = open('../data/test/last12h_mean_mimic_m1_s0.%s_fold%d.out'%(freq_t,nthfold), 'w')
	fnids = open('../data/test/last12h_mean_mimic_m1_s0.%s_fold%d.ids'%(freq_t,nthfold), 'w')

	fnids.write('id:list\n')
	ks = sorted(h.keys(), key=lambda k: h[k]['gid'])
	for k in ks:
		fnids.write(str(h[k]['gid'])+':')
		if 'new_sg_list' in h[k]:
			new_key = k + h[k]['new_sg_list']
			fnids.write('%s\n'%new_key)
		else:
			fnids.write('%s\n'%k)
		fnids.write(h[k]['sgstr'])
		fnout.write(h[k]['nodeinfo'])
	fnids.close()
	fnout.close()

def merge_subgraphs(h, freq_t, nthfold, sid):
	fnout = open('../data/test/last12h_mean_mimic_m1_s0.%s_fold%d.out'%(freq_t,nthfold), 'r')
	fnids = open('../data/test/last12h_mean_mimic_m1_s0.%s_fold%d.ids'%(freq_t,nthfold), 'r')

	hout = read_fnout(fnout)
	hids = read_fnids(fnids, hout)

	fnout.close()
	fnids.close()

	for k in hids:
		if k not in h:
			m = re.search(r'%d_(\d+)'%int(sid), k)
			if m:
				new_sg = m.group(0)
				old_k = re.sub(',%s'%(new_sg), "", k)

				if old_k not in h:
					h[k] = {}
					new_gid = len(h)
					h[k]['gid'] = new_gid
					h[k]['sgstr'] = hids[k]['sgstr']
					h[k]['nodeinfo'] = re.sub(r'g (\d+)', 'g %d'%new_gid, hids[k]['nodeinfo'])
				else:
					if 'new_sg_list' not in h[old_k]:
						h[old_k]['new_sg_list'] = ''
					h[old_k]['new_sg_list'] += ',%s'%new_sg
					slist = hids[k]['sgstr'].split('\n')
					new_sgstr = ''
					for s in slist:
						# if sid == 117 and h[old_k]['gid'] == 417:
						# 	print s
						m = re.search(r'%s -> (.*)'%new_sg, s)
						if m:
							# if sid == 117 and h[old_k]['gid'] == 417:
							# 	print m.group(0)
							new_sgstr += m.group(0) + ' \n'
					h[old_k]['sgstr'] += new_sgstr
					# if sid == 117 and h[old_k]['gid'] == 417:
					# 	print h[old_k]['sgstr']
			else:
				print 'unknown sid'
	return h

def sub_mining_ptbypt(fntr, fnte, nthfold, freq_t):
	test = pd.read_csv(fnte)

	x.scan_csv_interpolation(fntr, "../data/train/last12h_mean_fold%d.nel"%nthfold, "../data/train/last12h_mean_fold%d.node"%nthfold)
	moss(freq_t, nthfold)
	sg_hash = get_sg_tr_hash(freq_t,nthfold)

	gp = test.groupby('sid')
	i = 0
	for sid, group in gp:
		i += 1
		print int(sid), i
		# t1 = datetime.now()

		# # slow
		# to_interp = train.append(group)
		# to_interp.to_csv('../data/test/to_interp.csv', index=False)
		# x.scan_csv_interpolation('../data/test/to_interp.csv', '../data/test/last12h_mean_fold0_%d_%d.nel'%(i,sid), '../data/test/last12h_mean_fold0_%d_%d.node'%(i,sid))
		

		group.to_csv('../data/test/to_interp.csv', index=False)
		x.scan_csv_interpolation('../data/test/to_interp.csv', '../data/test/fold%d.nel'%(nthfold), '../data/test/fold%d.node'%(nthfold))
		
		fnnel_o = open('../data/test/last12h_mean_fold%d.nel'%(nthfold), 'w')
		fnnode_o = open('../data/test/last12h_mean_fold%d.node'%(nthfold), 'w')

		fnnel_tr = open('../data/train/last12h_mean_fold%d.nel'%nthfold, 'r')
		fnnode_tr = open('../data/train/last12h_mean_fold%d.node'%nthfold, 'r')
		fnnel_te = open('../data/test/fold%d.nel'%(nthfold), 'r')
		fnnode_te = open('../data/test/fold%d.node'%(nthfold), 'r')
		for line in fnnel_tr:
			fnnel_o.write(line)
		for line in fnnel_te:
			fnnel_o.write(line)
		for line in fnnode_tr:
			fnnode_o.write(line)
		for line in fnnode_te:
			fnnode_o.write(line)
		fnnel_tr.close()
		fnnode_tr.close()
		fnnel_te.close()
		fnnode_te.close()
		fnnel_o.close()
		fnnode_o.close()
		# t2 = datetime.now()
		# print t2-t1
		moss(freq_t, nthfold, i, sid)

		sg_hash = merge_subgraphs(sg_hash, freq_t, nthfold, sid)
		write_subgraphs(sg_hash, freq_t, nthfold)

# for i in range(5):
# 	sub_mining_ptbypt('../data/train/last12h_mean_train_fold%d.csv'%i, '../data/test/last12h_mean_test_fold%d.csv'%i, i, '006')

# java -cp moss.jar moss.Miner -inelist -onelist -m1 -s0.003 data/mimic.nel data/mimic_m1_s0.003.out data/mimic_m1_s0.003.ids &> log_m1_s0.003
